# Define URL prefix and suffix
url_prefix <- 'https://spotifycharts.com/regional/global/daily/'
url_suffix <- '/download'
# List of Column Names that should exist in the dataframe
col_names = c("Position","Track.Name","Artist","Streams","URL")
# Define a function that pulls data from a certain date
get_top200 <- function(date) {
url <- str_c(url_prefix,
format.Date(date),
# TODO The following is needed if the date is the current date
#ifelse(date == Sys.Date(),'latest',format.Date(date)),
url_suffix)
# TODO Uncomment for debug
print(str_c("Pulling from ",url))
# Pull data from web
top200_df <- read.csv(url)
# There are sometimes file that do not exist, this handles the exception
ifelse(all(colnames(top200_df) %in% col_names),
top200_df <- top200_df %>% mutate(Date = date), # Create a date attribute
top200_df <- data.frame()) # Return an empty data frame if invalid
top200_df
}
top200_df <- data.frame()
date <- start_date
while (date <= end_date) {
top200_df <- top200_df %>%
rbind(get_top200(date))
date <- date + 1
}
top200_df
View(top200_df)
top200_df <- data.frame()
date <- start_date
while (date <= end_date) {
top200_df <- top200_df %>%
rbind(get_top200(date))
date <- date + 1
}
top200_df
n(top200_df)
n()
help(size)
nrow(top200_df)
nrow(top200_df) / 200
top200_df
setwd("~/Google Drive/School/2017-2018/Spring Semester/CMSC 320 Introduction To Data Sciences/projects/pf")
help("data.frame")
data.frame(x=1,y=1:10)
data.frame(x=1,y=1:10,fac=fac)
data.frame(x=1,y=1:10,fac=x+y)
data.frame(x=1,y=1:10,z=10:1)
data.frame %>% write.csv("data/test.csv")
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
data.frame %>% write.csv("data/test.csv")
data.frame(x=1,y=1:10,z=10:1) %>% write.csv("data/test.csv")
data.frame(x=1,y=1:10,z=10:1) %>% write.csv("data/test.csv")
print("test")
data.frame()
data.frame() == data.frame()
data.frame() %>% nrows() == 0
data.frame() %>% nrow() == 0
if (TRUE) {}
if (TRUE) {print("Y")}
if (nrow(top200_df) == 0) { top200_df <- read.csv("data/2017top200songs.csv") }
# Set a variable for the processing date
date <- start_date
# Get start and end date
start_date <- as.Date("2017/1/1")
end_date <- as.Date("2018/1/1")
# Define URL prefix and suffix
url_prefix <- 'https://spotifycharts.com/regional/global/daily/'
url_suffix <- '/download'
# List of Column Names that should exist in the dataframe
col_names = c("Position","Track.Name","Artist","Streams","URL")
# Define a function that pulls data from a certain date
get_top200 <- function(date) {
url <- str_c(url_prefix,
format.Date(date),
# TODO The following is needed if the date is the current date
#ifelse(date == Sys.Date(),'latest',format.Date(date)),
url_suffix)
# TODO Uncomment for debug
# print(str_c("Pulling from ",url))
# Pull data from web
top200_df <- read.csv(url)
# There are sometimes file that do not exist, this handles the exception
ifelse(all(colnames(top200_df) %in% col_names),
top200_df <- top200_df %>% mutate(Date = date), # Create a date attribute
top200_df <- data.frame()) # Return an empty data frame if invalid
top200_df
}
# Set a variable for the processing date
date <- start_date
# Set the empty dataframe to be added on
top200_df <- data.frame()
# Name of output file
file_output <- "data/2017top200songs.csv"
if (nrow(top200_df) == 0) { top200_df <- read.csv("data/2017top200songs.csv") }
## Display the data
top200_df %>%
head(10)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
# Get start and end date
start_date <- as.Date("2017/1/1")
end_date <- as.Date("2018/1/1")
# Define URL prefix and suffix
url_prefix <- 'https://spotifycharts.com/regional/global/daily/'
url_suffix <- '/download'
# List of Column Names that should exist in the dataframe
col_names = c("Position","Track.Name","Artist","Streams","URL")
# Define a function that pulls data from a certain date
get_top200 <- function(date) {
url <- str_c(url_prefix,
format.Date(date),
# TODO The following is needed if the date is the current date
#ifelse(date == Sys.Date(),'latest',format.Date(date)),
url_suffix)
# TODO Uncomment for debug
# print(str_c("Pulling from ",url))
# Pull data from web
top200_df <- read.csv(url)
# There are sometimes file that do not exist, this handles the exception
ifelse(all(colnames(top200_df) %in% col_names),
top200_df <- top200_df %>% mutate(Date = date), # Create a date attribute
top200_df <- data.frame()) # Return an empty data frame if invalid
top200_df
}
# Set a variable for the processing date
date <- start_date
# Set the empty dataframe to be added on
top200_df <- data.frame()
# Name of output file
file_output <- "data/2017top200songs.csv"
# Iterate every date from start to end
while (date <= end_date) {
top200_df <- top200_df %>%
rbind(get_top200(date))
date <- date + 1
}
# Save the file to csv
top200_df %>% write.csv(file_output)
if (nrow(top200_df) == 0) { top200_df <- read.csv("data/2017top200songs.csv") }
## Display the data
top200_df %>%
head(10)
if (nrow(top200_df) == 0) { top200_df <- read.csv(file_output) }
# Set a variable for the processing date
date <- start_date
# Set the empty dataframe to be added on
top200_df <- data.frame()
# Name of output file
file_output <- "data/2017top200songs.csv"
if (nrow(top200_df) == 0) { top200_df <- read.csv(file_output) }
## Display the data
top200_df %>%
head(10)
View(top200_df)
if (nrow(top200_df) == 0) { top200_df <- read.csv(file_output) %>% select(-X)}
# Set a variable for the processing date
date <- start_date
# Set the empty dataframe to be added on
top200_df <- data.frame()
# Name of output file
file_output <- "data/2017top200songs.csv"
if (nrow(top200_df) == 0) { top200_df <- read.csv(file_output) %>% select(-X)}
## Display the data
top200_df %>%
head(10)
## Display the data
top200_df %>%
head()
## Display the data
top200_df
## Display the data
top200_df %>%
head(10)
## Display the data
top200_df %>%
group_by(Date) %>%
sample(1) %>%
head(10)
## Display the data
top200_df %>%
group_by(Date) %>%
summarise() %>%
head(10)
## Display the data
top200_df %>%
head(10)
install.packages('spotifyr')
install.packages('spotifyr')
install.packages('spotifyr')
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
client_id = 'f6eb05cabe1b40918336d70c9b9d157e'
client_secret = '5615c7eb790a471fba93915d37e8a367'
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
client_id = 'f6eb05cabe1b40918336d70c9b9d157e'
client_secret = '5615c7eb790a471fba93915d37e8a367'
# Installing and mounting the spotifyr library
install.packages('spotifyr')
library(spotifyr)
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
beatles <- get_artist_audio_features('the beatles')
beatlets
beatles
beatles <- get_artist_audio_features('The Beatles')
beatles <- get_artist_albums('The Beatles')
beatles <- get_artist_album('The Beatles')
beatles <- get_artist_audio_features('The Beatles')
beatles <- get_artists('The Beatles')
beatles
get_artists('radiohead')
get_artists('radiohead')$artist_uri
get_artists('radiohead')$artist_uri[1]
get_artists('radiohead')
get_artists('radiohead')$artist_uri
help("spotifyr")
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_audio_features('radiohead)
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_audio_features('radiohead')
get_artist_audio_features('radiohead')
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
detach(spotifyr)
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
detach('spotifyr')
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
detach_package('spotifyr')
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
detach('package:spotifyr')
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
detach('package:spotifyr',unload = TRUE)
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
detach('package:spotifyr')
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
# detach('package:spotifyr')
devtools::install_github('charlie86/spotifyr')
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
# detach('package:spotifyr')
install.packages('devtools')
devtools::install_github('charlie86/spotifyr')
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
# detach('package:spotifyr')
# install.packages('devtools')
devtools::install_github('charlie86/spotifyr')
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
# detach('package:spotifyr')
# install.packages('devtools')
# devtools::install_github('charlie86/spotifyr')
library(spotifyr)
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_audio_features('radiohead')
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_audio_features(artist_uri = uri)
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_audio_features(uri)
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_audio_features('radiohead')
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_albums('radiohead')
get_albums(uri)
get_track_popularity("let it be")
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
remove.packages('spotifyr')
# install.packages('devtools')
# devtools::install_github('charlie86/spotifyr')
# library(spotifyr)
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
# remove.packages('spotifyr')
install.packages('devtools')
devtools::install_github('charlie86/spotifyr')
library(spotifyr)
install.packages("devtools")
client_id = 'f6eb05cabe1b40918336d70c9b9d157e'
client_secret = '5615c7eb790a471fba93915d37e8a367'
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_albums('radiohead')
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_audio_features('radiohead')
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
# remove.packages('spotifyr')
install.packages('devtools')
devtools::install_github('charlie86/spotifyr')
library(spotifyr)
install.packages("devtools")
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
uri <- get_artists('radiohead')$artist_uri[1]
uri <- get_artists('radiohead')$artist_uri[1]
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
client_id = 'f6eb05cabe1b40918336d70c9b9d157e'
client_secret = '5615c7eb790a471fba93915d37e8a367'
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
# remove.packages('spotifyr')
install.packages('devtools')
devtools::install_github('charlie86/spotifyr')
library(spotifyr)
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
# remove.packages('spotifyr')
install.packages('devtools')
devtools::install_github('charlie86/spotifyr')
install.packages("devtools")
client_id = 'f6eb05cabe1b40918336d70c9b9d157e'
client_secret = '5615c7eb790a471fba93915d37e8a367'
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
# Installing and mounting the spotifyr library
install.packages('spotifyr')
library(spotifyr)
remove.packages('spotifyr')
# install.packages('devtools')
# devtools::install_github('charlie86/spotifyr')
# library(spotifyr)
# Installing and mounting the spotifyr library
install.packages('spotifyr')
library(spotifyr)
remove.packages('spotifyr')
install.packages('devtools')
devtools::install_github('charlie86/spotifyr')
install.packages("spotifyr")
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
# Installing and mounting the spotifyr library
install.packages('spotifyr')
# library(spotifyr)
remove.packages('spotifyr')
install.packages('devtools')
devtools::install_github('charlie86/spotifyr')
library(spotifyr)
# Installing and mounting the spotifyr library
install.packages('spotifyr')
# library(spotifyr)
# remove.packages('spotifyr')
install.packages('devtools')
devtools::install_github('charlie86/spotifyr')
install.packages("devtools")
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
client_id = 'f6eb05cabe1b40918336d70c9b9d157e'
client_secret = '5615c7eb790a471fba93915d37e8a367'
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
# Installing and mounting the spotifyr library
install.packages('spotifyr')
# library(spotifyr)
# remove.packages('spotifyr')
install.packages('devtools')
devtools::install_github('charlie86/spotifyr')
library(spotifyr)
client_id = 'f6eb05cabe1b40918336d70c9b9d157e'
client_secret = '5615c7eb790a471fba93915d37e8a367'
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_audio_features('radiohead')
uri <- get_artists('radiohead')$artist_uri[1]
uri <- get_artists('radiohead')$artist_uri[1]
get_albums(uri)
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
remove.packages('spotifyr')
#
# install.packages('devtools')
# devtools::install_github('charlie86/spotifyr')
# library(spotifyr)
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
# remove.packages('spotifyr')
install.packages('devtools')
devtools::install_github('charlie86/spotifyr')
install.packages("devtools")
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
# Installing and mounting the spotifyr library
# install.packages('spotifyr')
# library(spotifyr)
# remove.packages('spotifyr')
install.packages('stringdist')
install.packages('devtools')
devtools::install_github('charlie86/spotifyr')
library(spotifyr)
uri <- get_artists('radiohead')$artist_uri[1]
get_albums(uri)
client_id = 'f6eb05cabe1b40918336d70c9b9d157e'
client_secret = '5615c7eb790a471fba93915d37e8a367'
Sys.setenv(SPOTIFY_CLIENT_ID = client_id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = client_secret)
access_token <- get_spotify_access_token()
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_audio_features('the beatles')
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_audio_features('the beatles') %>% unique()
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_audio_features('the beatles') %>% unique.data.frame()
uri <- get_artists('radiohead')$artist_uri[1]
get_artist_audio_features('the beatles') %>% select(track_name)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
# Get start and end date
start_date <- as.Date("2017/1/1")
end_date <- as.Date("2018/1/1")
# Define URL prefix and suffix
url_prefix <- 'https://spotifycharts.com/regional/global/daily/'
url_suffix <- '/download'
# List of Column Names that should exist in the dataframe
col_names = c("Position","Track.Name","Artist","Streams","URL")
# Define a function that pulls data from a certain date
get_top200 <- function(date) {
url <- str_c(url_prefix,
format.Date(date),
# TODO The following is needed if the date is the current date
#ifelse(date == Sys.Date(),'latest',format.Date(date)),
url_suffix)
# TODO Uncomment for debug
# print(str_c("Pulling from ",url))
# Pull data from web
top200_df <- read.csv(url)
# There are sometimes file that do not exist, this handles the exception
ifelse(all(colnames(top200_df) %in% col_names),
top200_df <- top200_df %>% mutate(Date = date), # Create a date attribute
top200_df <- data.frame()) # Return an empty data frame if invalid
top200_df
}
# Set a variable for the processing date
date <- start_date
# Set the empty dataframe to be added on
top200_df <- data.frame()
# Name of output file
file_output <- "data/2017top200songs.csv"
if (nrow(top200_df) == 0) { top200_df <- read.csv(file_output) %>% select(-X)}
## Display the data
top200_df %>%
head(10)
